<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/03/21/Mysql/"/>
      <url>/2024/03/21/Mysql/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Blockchain</title>
      <link href="/2024/02/14/Blockchain/"/>
      <url>/2024/02/14/Blockchain/</url>
      
        <content type="html"><![CDATA[<h2 id="一、认识"><a href="#一、认识" class="headerlink" title="一、认识"></a>一、认识</h2><p>多交由第三方平台存储比特币（易丢失）<br>silk road<br>交易记录被记录，所有权是匿名<br>非货币，储备，价值载体<br>手续费竞争被记录的速度，手续费作为挖矿主要回馈（耗电大-&gt;安全[工作量证明机制]）<br>交易多，速度慢（管径尺寸限制-&gt;速度限制）<br>传统：信息为第三方平台所有；  blockchain：信息对等</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GO</title>
      <link href="/2023/11/23/GO/"/>
      <url>/2023/11/23/GO/</url>
      
        <content type="html"><![CDATA[<p>一、Hello World</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main()&#123;</span><br><span class="line">    fmt.Println(&quot;Hello World!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;tips&#x3D;&#x3D;:”{“不能单独放在一行</p><p>声明变量：var a1, b1 type<br>eg: var b, c int &#x3D; 1, 2</p><p>数组: var num [5]int<br>     var num &#x3D; [5]int{1,2,3,4,5}</p><p>函数:func function_name( [parameter list] ) [return_types]<br>eg: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 函数返回两个数的最大值 */</span><br><span class="line">func max(num1, num2 int) int &#123;</span><br><span class="line">   /* 声明局部变量 */</span><br><span class="line">   var result int</span><br><span class="line"></span><br><span class="line">   if (num1 &gt; num2) &#123;</span><br><span class="line">      result = num1</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">      result = num2</span><br><span class="line">   &#125;</span><br><span class="line">   return result </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2023/11/10/linux/"/>
      <url>/2023/11/10/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="系统分区"><a href="#系统分区" class="headerlink" title="系统分区"></a>系统分区</h1><p>格式化：在硬盘中写入文件系统（把硬盘分成等大小数据块，建立inode列表）<br>硬件设备文件名：IDE硬盘（&#x2F;dev&#x2F;hd[a-d]），SCSI&#x2F;SATA&#x2F;USB(&#x2F;dev&#x2F;sd[a-p])<br>分区设备文件名：在硬盘文件名后加分区号(&#x2F;dev&#x2F;hda 1)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GMS2</title>
      <link href="/2023/10/21/post-2/"/>
      <url>/2023/10/21/post-2/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>1、布局：spirit、object、room(左下Viewports and Cameras[enable][visible])<br>2、操作：滚轮上下，按住中键移动，ctrl+滚轮放大缩小，拖动右侧spirit至room房间，变量上按中建(help)<br>3、代码：image_speed、keyboard_check(vk_right)、<br>    image_xscale &#x3D;(+-1)  &#x2F;&#x2F;反转（注意中心点，spirit中Origin）原点设置在胯下    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kfdvhd</title>
      <link href="/2023/10/21/kfdvhd/"/>
      <url>/2023/10/21/kfdvhd/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Java语言概述"><a href="#一、Java语言概述" class="headerlink" title="一、Java语言概述"></a>一、Java语言概述</h1><h2 id="0、术语"><a href="#0、术语" class="headerlink" title="0、术语"></a>0、术语</h2><p>1、&#x3D;&#x3D;JDK&#x3D;&#x3D; &#x3D; JRE + 开发者工具<br>2、&#x3D;&#x3D;JRE&#x3D;&#x3D; &#x3D; JVM + Java SE标准类库<br>3、&#x3D;&#x3D;API&#x3D;&#x3D;：提供的基本编程接口（Systme.out），有相应的<a href="https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html">API文档</a><br>4、核心机制：&#x3D;&#x3D;JVM&#x3D;&#x3D;：java虚拟机，是java程序的运行环境（字节码文件在JVM中跑）<br>JVM功能：跨平台性、自动内存管理（分配，回收）</p><h2 id="一、hello-java"><a href="#一、hello-java" class="headerlink" title="一、hello java"></a>一、hello java</h2><p>1、&#x3D;&#x3D;开发步骤&#x3D;&#x3D;<br><strong>编写</strong>.java源文件 –&gt; 通过javac.exe<strong>编译</strong>生成字节码文件 –&gt; 通过java.exe生成class文件<strong>运行</strong>       (javac test.java    java test)</p><hr><p>2、&#x3D;&#x3D;编写&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class HelloJava&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;hellojava&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①、class:关键字，后面跟类名<br>②、public static void main(String[] args):main方法格式固定,程序入口<br>③、System.out.println(“”)：控制台输出数据    &#x2F;&#x2F;输出换行<br>   System.out.print(“”);                   &#x2F;&#x2F;不换行<br>   println(“<strong>“+ 变量 +”</strong>“+变量)           &#x3D;&#x3D;&#x2F;&#x2F;同时输出变量和内容&#x3D;&#x3D;<br>④、println中文时，另存为.java文件为ANSI文件<br>⑤、println换行：直接println();<br>⑥、&#x3D;&#x3D;\t&#x3D;&#x3D;:制表符（一定长度的空格：tab键）  &#x3D;&#x3D;\n&#x3D;&#x3D;:换行     &#x2F;&#x2F;需要在“”内使用</p><h2 id="二、注释"><a href="#二、注释" class="headerlink" title="二、注释"></a>二、注释</h2><p>&#x3D;&#x3D;注释&#x3D;&#x3D;：<br>①、&#x2F;&#x2F;注释：单行注释<br>②、&#x2F;<em>注释</em>&#x2F;：多行注释<br>③、&#x2F;**<br>        @author<br>        @version<br>    *&#x2F;                文档注释，可以被javadoc解析，生成网页文件的程序说明文档（javadoc -d docname -author -version classname.java）</p><h1 id="二、变量与运算符"><a href="#二、变量与运算符" class="headerlink" title="二、变量与运算符"></a>二、变量与运算符</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>定义：被java赋予了特殊含义，用作专门用途的字符串（class、public、static、void），全是小写字母，<a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">关键字官方地址</a></p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>定义：变量、方法、类等命名时使用的字符序列<br>命名规则：区分大小写，数字不开头，可用_$符号<br>&#x3D;&#x3D;命名规范&#x3D;&#x3D;:<br>类名：多单词组成，所有首字母大写<br>变量名：多单词组成，第一个首字母小写，其他大写<br>常量名：所有字母大写，下划线连接<br>包名：所有首字母小写</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>基本数据类型:整型（byte1\short2\int4\long8）、浮点型(float7、double)、字符型、布尔型（boolean）<br>引用数据类型:类（class）、数组（array）、接口（interface）、枚举（enum）、注解（annotation）、记录（record）<br>补充：1字节（Byte）&#x3D;8位（bit）<br>注意：<br>①、声明long变量时，需要提供后缀’l’或’L’(long l1 &#x3D; 123123123L;)<br>②、声明float时，需要后缀’f’或者’F’<br>③、需要精确精度，需要使用BigDecimal类</p><p>&#x3D;&#x3D;char的注意事项&#x3D;&#x3D;<br>①、、char c1 &#x3D; ‘a’           (单引号，只能赋予一个符号)<br>②、char可直接使用Unicode值或ASCII码表示字符常量（char c11 &#x3D; 97; char c10 &#x3D; ‘\u0036’）<br>③、可使用转义字符（char c9 &#x3D; ‘\n’）</p><hr><p>&#x3D;&#x3D;自动类型提升规则:&#x3D;&#x3D;<br><strong>1、定义</strong>：当&#x3D;&#x3D;容量&#x3D;&#x3D;小的与容量大的运算，结果自动转换为容量大的数据类型<br><strong>2、大小</strong>:tyte、short、char—&gt;int—&gt;long—&gt;float—&gt;double<br><strong>3、特殊：</strong><br>    byte + short &#x3D; int<br>    char + byte &#x3D; int<br><strong>4、解释后缀l、f：</strong><br>    long l2 &#x3D; 123;（123本是4个字节，赋给long后自动转换）<br>    long 14 &#x3D; 123123123123(因为超出int范围，所以报错)</p><hr><p>&#x3D;&#x3D;强制类型转换&#x3D;&#x3D;<br>int i1 &#x3D; 1;<br>byte b1 &#x3D; byte(i1);</p><hr><p>&#x3D;&#x3D;String类的基本使用&#x3D;&#x3D;<br>String可与基本数据类型做连接运算，使用+<br>实现将String转为int：int num3 &#x3D; Integer.parseInt(str)</p><hr><p>&#x3D;&#x3D;进制:&#x3D;&#x3D;<br>二进制：0b开头<br>8进制：0开头<br>16进制：0x开头，0<del>9，a</del>f</p><hr><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>1、++、–使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    int i = 1;</span><br><span class="line">    int j = i++ + ++1 * i++;</span><br><span class="line">//j = 10;</span><br><span class="line">    System.out.println(&quot;j&quot;);</span><br></pre></td></tr></table></figure><hr><p>2、逻辑运算符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    boolen b1 = false;</span><br><span class="line">    int num1 = 10;</span><br><span class="line">    if(b1 &amp;&amp; (num1++&gt;0))</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;true&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        System.out.println(&quot;false&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">//输出位false, num = 10(&amp;&amp;左边为false，不会执行右边，&amp;会执行右边)</span><br></pre></td></tr></table></figure><h1 id="三、流程控制"><a href="#三、流程控制" class="headerlink" title="三、流程控制"></a>三、流程控制</h1><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">class ScannerTest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scan = new Scanner(System.in);</span><br><span class="line">        String name = scan.next();</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>improt java.util.Scanner:导包<br>Scanner scan &#x3D; new Scanner(System.in):提供Scanner类实例<br>scan.next:调用Scanner类的方法，获取指定类型变量<br>scan.close():关闭资源<br>获取char：使用next().charAt(0), nextInt()</p><h2 id="获取随机数"><a href="#获取随机数" class="headerlink" title="获取随机数"></a>获取随机数</h2><p>1、可以使用Java提供的API：Math类的random()：double b1 &#x3D; Math.random()<br>2、random()调用后，返回一个[0.0,1.0]范围的double型<br>3、获取一个[1，100]范围的随机整数： (int)(Math.random() * 100) + 1;</p><h2 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#123;</span><br><span class="line">    case 常量1:</span><br><span class="line">        //执行语句</span><br><span class="line">        //break;不加的话向下顺序执行执行语句</span><br><span class="line">    ...</span><br><span class="line">    default:</span><br><span class="line">        //执行语句</span><br><span class="line">        //break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;说明&#x3D;&#x3D;：switch中的表达式只能是特定的数据类型（byte\short\char\int\枚举）</p><hr><h1 id="四、IDEA开发工具"><a href="#四、IDEA开发工具" class="headerlink" title="四、IDEA开发工具"></a>四、IDEA开发工具</h1><h1 id="五、数组array"><a href="#五、数组array" class="headerlink" title="五、数组array"></a>五、数组array</h1><h2 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">double[] prices;</span><br><span class="line">prices = new double[]&#123;20.32, 43.21, 43.22&#125;;</span><br><span class="line"></span><br><span class="line">String[] foods = new String[4];</span><br></pre></td></tr></table></figure><p>数组长度:foods.length</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = new int[3];    //有new，开辟长度3的数组空间，返回数组首地址给arr</span><br><span class="line">arr[0] = 5;</span><br><span class="line">arr[1] = 6;</span><br><span class="line">arr[2] = 7;</span><br><span class="line">int arr1 = arr;            //将arr存的值即数组首地址赋给arr1,arr1也指向上一个数组</span><br><span class="line">arr1[1] = 9;</span><br><span class="line">System.out.println(arr[1]);</span><br></pre></td></tr></table></figure><h2 id="二维数组声明"><a href="#二维数组声明" class="headerlink" title="二维数组声明"></a>二维数组声明</h2><p>本质是一维数组中存储数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int [][] arr2 = new int[][]&#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8,9&#125;&#125;;</span><br><span class="line"></span><br><span class="line">String [][] arr3 = new String[3][4];</span><br><span class="line"></span><br><span class="line">double [][] arr4 = new double[2][];</span><br><span class="line">arr4[0] = new double[4];</span><br></pre></td></tr></table></figure><h1 id="六、面向对象基础"><a href="#六、面向对象基础" class="headerlink" title="六、面向对象基础"></a>六、面向对象基础</h1><h2 id="example-Phone类、Phonetest类"><a href="#example-Phone类、Phonetest类" class="headerlink" title="example:Phone类、Phonetest类"></a>example:Phone类、Phonetest类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Phone&#123;</span><br><span class="line">    //属性</span><br><span class="line">    String name;</span><br><span class="line">    double price;</span><br><span class="line"></span><br><span class="line">    //方法</span><br><span class="line">    public void call()&#123;</span><br><span class="line">        System.out.println(&quot;手机能打电话&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sendMessage(Sting message)&#123;</span><br><span class="line">        System.out.println(&quot;发送消息&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Phonetest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        //创建Phone对象（new）</span><br><span class="line">        //类似Scanner scan = new Scanner(System.in);</span><br><span class="line">        Phone p1 = new Phone();</span><br><span class="line">        //通过Phone对象(p1)调用内部声明的属性或方法(name,price)</span><br><span class="line">        p1.name = &quot;iphone13pro&quot;;</span><br><span class="line">        p2.price = 10099;</span><br><span class="line">        //调用方法</span><br><span class="line">        p1.call();</span><br><span class="line">        p1.sendMessage(&quot;123&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象流程"><a href="#面向对象流程" class="headerlink" title="面向对象流程"></a>面向对象流程</h2><pre><code>S1、创建类，并设计类内部成员（属性，方法）S2、创建类对象（new）S3、通过对象调用内部声明的属性，方法</code></pre><h2 id="方法（函数）"><a href="#方法（函数）" class="headerlink" title="方法（函数）"></a>方法（函数）</h2><pre><code>①、方法声明格式    public void eat(String food)    权限修饰符 返回值类型 方法名(形参列表)&#123;&#125;②、权限修饰符:private \ 缺省 \ protected \ public③、对象数组：</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class StudentTest&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Student[] students = new Student[20];           //创建可以存储20个Student对象的Student类数组，但对象并未被创建初始化，只是分配了空间来容纳20个对象引用</span><br><span class="line">        for(int i = 0; i &lt; students.length; i++)&#123;</span><br><span class="line">            students[i] = new Student();                //将新创建的 Student 对象的引用赋给数组 students，使得数组中的每个元素都指向一个独立的 Student 对象</span><br><span class="line">            students[i].number = i+1;</span><br><span class="line">            students[i].state = (int)(Math.random()*6 + 1);</span><br><span class="line">            students[i].score = (int)(Math.random()*101);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>④、对对象属性的访问规范：把原对象赋给新创建对象，再对属性访问:</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class StudentUtil&#123;</span><br><span class="line">    public void printStudents(Student[] students, int state)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i =0; i &lt; students.length; i++)&#123;</span><br><span class="line">            if(students[i].state ==3)&#123;</span><br><span class="line">                Student stu = students[i];            //先赋值再访问</span><br><span class="line">                System.out.println(&quot;number:&quot; + stu.number + &quot;，state:&quot; + stu.state + &quot;，score:&quot; + stu.score);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法应用"><a href="#方法应用" class="headerlink" title="方法应用"></a>方法应用</h2><pre><code>1、重载    定义：同一个类中，允许存在同名方法，但是参数列表(参数个数，参数类型)不同即可，彼此称为重载2、可变个数的形参    定义：形参类型确定，形参的个数不确定    格式：(参数类型 ... 参数名)    说明：①、赋的实参的个数可以是0、1、多个  ②、与同一类同名方法间构成重载（特例：同名，与可变个数类型相同的数组参数不构成重载）    注意：可变个数形参在形参列表中必须放最后3、方法值传递机制：    形参是基本数据类型，将实参保存的数据值赋给形参    形参是引用数据类型，将实参保存的地址赋给形参    example:</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class ValueTransferTest1 &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ValueTransferTest1 test = new ValueTransferTest1();</span><br><span class="line"></span><br><span class="line">        int m = 10;</span><br><span class="line">        test.method(m);</span><br><span class="line">        System.out.print(&quot;m = &quot; + m);     //m = 10</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void method(int m)&#123;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//method 方法中m为形参，与main中m = 10 无关,将m赋值给形参m,形参++不影响原m</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//错误:</span><br><span class="line">swap(arr[i], arr[i+1]);</span><br><span class="line"></span><br><span class="line">//正确:</span><br><span class="line">swap(arr, i, i+1)</span><br></pre></td></tr></table></figure><pre><code>4、递归方法example:</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//计算n的阶乘</span><br><span class="line">public int getMul(int n)&#123;</span><br><span class="line">    if(n == 1)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return n * getMul(n - 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//先从n向下不断调方法等待返回，直到n = 1，逐层弹栈返回到n = n</span><br></pre></td></tr></table></figure><h2 id="package与import关键字"><a href="#package与import关键字" class="headerlink" title="package与import关键字"></a>package与import关键字</h2><pre><code>1、package关键字：    用于指明该文件中定义的类、接口结构所在的包，一个源文件只声明一个包，位于第一条语句    命名规范：全部小写        公司域名倒置：com.atguigu.xxx        文件系统目录，每一个.代表一层目录    ·JDK常用包：java.lang ---java语言核心类，String、Math、Integer、System，提供常用功能               java.net、java.io、java.util、java.text、java.sql、java.awt2、import：    用于显示引入指定包下的类。    注意：①、使用a.*表示导入a包下的所有结构（import java.util.*;）          ②、如果使用不同包下同名的类，需要使用类的全类名来指明                import java.util.*                    Date date = null                    java.sql.Date date1 = new java.sql.Date(12123123L)    </code></pre><h2 id="面向对象特征之一：封装性"><a href="#面向对象特征之一：封装性" class="headerlink" title="面向对象特征之一：封装性"></a>面向对象特征之一：封装性</h2><pre><code>1.为什么需要封装性：把客观事物封装成抽象的类，把数据方法仅向可信的类对象开放，隐藏不必要信息（该隐藏隐藏，该暴露暴露）    -&#39;高内聚&#39;：类的内部数据操作自己完成，不允许外部干涉；    -&#39;低耦合&#39;：仅暴露少量的方法方便外部使用2、如何实现：    权限修饰符：private、缺省、protected、publicexample:</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Animal animal1 = new Animal();</span><br><span class="line">animal.name = &quot;金蝉&quot;;</span><br><span class="line">animal.legs = 4;</span><br><span class="line"></span><br><span class="line">class Aniaml &#123;</span><br><span class="line">    string name;</span><br><span class="line">    private int legs;         //禁止在Animal类外部直接调用此属性</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setlegs(int l)&#123;</span><br><span class="line">    if(l &gt;= 0 &amp;&amp; l % 2 == 0)&#123;         //需要限制属性leg的值，但可以通过.leg调用来给leg赋非法值，因此private leg使不能调用leg，只能通过方法设置值</span><br><span class="line">        legs = l;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        System.out.print(&quot;数据非法&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>注意：类只能用public和缺省修饰，private，protected修饰类内部成员</code></pre><h2 id="类的成员之三：构造器（constructor）-构造方法"><a href="#类的成员之三：构造器（constructor）-构造方法" class="headerlink" title="类的成员之三：构造器（constructor）,构造方法"></a>类的成员之三：构造器（constructor）,构造方法</h2><pre><code>作用：①、搭配new关键字，创建类的对象      ②、创建对象同时，给对象相关属性赋值声明格式：权限修饰符 类名(形参列表)&#123;&#125;注意：①、创建类以后，系统默认提供一个空参控制器      ②、一个类可以声明多个构造器，彼此间构成重载example:</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class person&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    public Person(String n)&#123;</span><br><span class="line">        System.out.println(&quot;Person构造器&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PersonTest&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Person p1 = new Person(n);         //Person构造器</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>example2：Scanner scan = new Scanner(System.in)匿名对象：</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//错误用法：</span><br><span class="line">new Account(1000,2000,0.123).withdraw(1000);</span><br><span class="line">System.out.println(new Account(1001,2000,0.123.getBalance))   //匿名对象只能调用一次，输出为2000</span><br><span class="line"></span><br><span class="line">//正确用法：</span><br><span class="line">customer.setAccount(new Account(1000,2000,0.123))   //作为实参传递给方法</span><br></pre></td></tr></table></figure><h3 id="实例变量赋值过程"><a href="#实例变量赋值过程" class="headerlink" title="实例变量赋值过程"></a>实例变量赋值过程</h3><pre><code>1、实例变量：    class Usder&#123;        int age;        char gender;   //age，gender均为实例变量    &#125;2、哪些位置给属性赋值：    默认赋值，显示赋值，构造器赋值，通过对象.方法，通过对象.属性3、JavaBean理解    符合如下标准的java类：        - 类是公共的；        - 有一个无参的公共构造器        - 有属性，且有对应的get、set方法</code></pre><h3 id="内存解析："><a href="#内存解析：" class="headerlink" title="内存解析："></a>内存解析：</h3><pre><code>java中内存结构分为：虚拟机栈，堆，方法区；程序计数器，本地方法栈虚拟机栈：以栈帧为单位，入栈出栈操作；每个帧入栈操作对应一个方法执；方法局部变量会存储在栈帧中堆空间：new出来的结构(数组，对象):数组，数组元素在堆中；对象成员变量在堆中方法区：加载的类的模板结构</code></pre><h1 id="七、面向对象进阶"><a href="#七、面向对象进阶" class="headerlink" title="七、面向对象进阶"></a>七、面向对象进阶</h1><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><pre><code>声明属性对应的set方法时，通过形参赋值，如果形参名和属性名同名，用this修饰属性变量this 的理解：当前对象（方法中调用时）或当前正在创建的对象（构造器中调用时）this调用构造器：    格式：this(形参列表)    //重载的构造器    可以在类的构造器中，调用当前类中指定的其他构造器    example:</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public User()&#123;&#125;</span><br><span class="line">public User(String name)&#123;</span><br><span class="line">    this();             //调用前一个无参构造器</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125; </span><br><span class="line">public User(String name, int age)&#123;</span><br><span class="line">    this(name);</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-set-快捷键：对象中alt-insert，按住ctrl选中所有成员"><a href="#get-set-快捷键：对象中alt-insert，按住ctrl选中所有成员" class="headerlink" title="get set 快捷键：对象中alt+insert，按住ctrl选中所有成员"></a>get set 快捷键：对象中alt+insert，按住ctrl选中所有成员</h3><h2 id="面向对象特征之二：继承性"><a href="#面向对象特征之二：继承性" class="headerlink" title="面向对象特征之二：继承性"></a>面向对象特征之二：继承性</h2><p>1、B继承A，B获得A中方法以及属性，不需要在此声明<br>2、格式：class A{}<br>        class B extends A {}<br>3、概念：父类（superClass，超类，基类）<br>        子类（subClass，派生类）<br>    注意：①、Java中声明的类，没有显示声明父类，默认继承于java.lang.Object<br>          ②、权限修饰符：子类只能用父类protected和public，子类外new子类对象时，只能调用public<br>          ③、子类继承private成员后，不能直接调用，需要借助父类方法 example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class ManKind&#123;</span><br><span class="line">    private int age;</span><br><span class="line">    public void setAge(int age)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Kids&#123;</span><br><span class="line">    private char sex;</span><br><span class="line">    public Kids(char sex, int age)&#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">        //错误：</span><br><span class="line">        this.age = age;</span><br><span class="line">        //正确：</span><br><span class="line">        setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><pre><code>子类对父类继承过来的方法进行的覆盖，覆写操作。方法的方法名和形参列表必须相同；子类重写的方法权限修饰符不小于原修饰符；子类不能重写父类中声明为private的方法；子类重写返回值类型必须与父类相同；    父类被重写返回值类型是引用（比如类），子类可以类型相同 或 是被重写方法返回值类型的子类；</code></pre><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><pre><code>子类重写父类方法后，使用super.调用父类方法属性也能重写，但不覆盖，同样用super.调父类父类构造器不继承，但可以调用：super(形参列表)子类要么调用本类重载构造器，要么调用父类构造器</code></pre><p>—&gt;在子类构造器创建对象时，一定在过程中直接或间接调用父类构造器，才将父类属性或方法加载到内存中</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/21/hello-world/"/>
      <url>/2023/10/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
